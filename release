#!/usr/bin/env nu
def str-strip-v (): [string -> string] {
    if ($in | str starts-with "v") {
    $in | str substring 1..
    } else {
        $in
    }
}

# Helper to compare two simplified semantic version strings (major.minor.patch only).
# Returns true if the first version ($v1_str) is strictly greater than the second ($v2_str).
# Handles cases like "1.0" vs "1.0.0" by defaulting missing parts to 0.
def "version-is-greater" [v1_str: string, v2_str: string] {
    # Split versions into parts (e.g., "1.2.3" -> [1, 2, 3]) and convert to integers.
    # `default 0` handles cases where a version might have fewer parts (e.g., "1.0").
    let v1_parts = ($v1_str | str-strip-v  | split row  "." | each { |p| $p | into int | default 0 })
    let v2_parts = ($v2_str | str-strip-v | split row "." | each { |p| $p | into int | default 0 })

    # Iterate up to 3 parts (major, minor, patch) for numerical comparison
    for $i in 0..2 {
        let part1 = $v1_parts | get $i | default 0 # Get part or 0 if it doesn't exist
        let part2 = $v2_parts | get $i | default 0

        if $part1 > $part2 {
            return true # v1 is greater in this part, so it's greater overall
        } else if $part1 < $part2 {
            return false # v1 is smaller in this part, so it's not greater overall
        }
        # If parts are equal, continue to the next part (minor, then patch)
    }
    # If all major, minor, and patch parts are equal, then v1 is not strictly greater than v2
    return false
}

# Main function to validate a new version against existing Git tags.
export def main [new_version: string] {
    let tags = git tag --list | lines

    # --- 1. Check for exact duplicate version ---
    # The new version cannot be one that has already been used.
    if $new_version in $tags {
        error make {
            msg: "Invalid version",
            label: {
                text: $"The version ($new_version) can't be one that you have already used.",
                span: (metadata $new_version).span # Highlights the input version in the error message
            }
        }
    }

    # --- 2. Validate against all existing versions ---
    # The new version must be strictly higher than ALL existing tags.
    # If there are no existing tags, this condition is automatically true (first release).
    let is_new_version_strictly_higher = if ($tags | is-empty) {
        true # No tags exist, so any new version is "higher" than all (none)
    } else {
        # Check if the new version is greater than EACH existing tag.
        # `all` ensures this holds true for every single tag.
        $tags | all { |existing_tag|
            version-is-greater $new_version $existing_tag
        }
    }

    # If the new version is not strictly higher than all existing tags, throw an error.
    if not $is_new_version_strictly_higher {
        error make {
            msg: "Version sequence error",
            label: {
                text: $"The new version ($new_version) must be strictly higher than all existing tags.",
                span: (metadata $new_version).span
            }
        }
    }

    # If all checks pass, the script will simply exit successfully,
    # allowing the next step in your release process (e.g., goreleaser) to proceed.
}

let VERSION_BUMP_ENUM = {
 PATCH: "patch",
 MINOR: "minor",
 MAJOR: "major"
}

let bump_words = [ $VERSION_BUMP_ENUM.PATCH, $VERSION_BUMP_ENUM.MINOR, $VERSION_BUMP_ENUM.MAJOR]

export def "main bump" (type: string) {

if $type not-in $bump_words {

error make {
    msg: "Invalid argument",
    label: {
        text: $"You must only use these words ($bump_words | str join ', ')",
        span: (metadata $type).span
    }
}

}
let all_tags = git tag --list | lines
let latest_tag_raw = (
    if ($all_tags | is-empty) {
        "0.0.0" # Default base if no tags exist to allow first bump
    } else {
        $all_tags | last | str-strip-v
    }
)

# Parse the latest tag into numeric parts (major, minor, patch)
# Ensure we have at least 3 parts, defaulting to 0 if not present for robustness
let parts = ($latest_tag_raw | split row "." | each { |p| $p | into int | default 0 })
let major = $parts | get 0 | default 0
let minor = $parts | get 1 | default 0
let patch = $parts | get 2 | default 0

let new_version = match $type {

  "patch" =>  {
    let new_patch = $patch + 1
    $"($major).($minor).($new_patch)"

  },

  "minor" =>  {
    let new_minor = $minor + 1
    $"($major).($new_minor).0" # Patch resets to 0 on minor bump
  },

  "major" =>  {
    let new_major = $major + 1
    $"($new_major).0.0" # Minor and Patch reset to 0 on major bump
  },
}

git tag $new_version -m $"Releasing version ($new_version) For JPD!"
git push --tags

}
