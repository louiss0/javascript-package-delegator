name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  lint:
    name: Lint, format, and vet
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true

      - name: Verify gofmt
        run: |
          set -euo pipefail
          files=$(gofmt -s -l . | grep -Ev '^(vendor/|$)' || true)
          if [[ -n "${files}" ]]; then
            echo "These files are not gofmt-formatted:"
            echo "${files}"
            echo "Run: gofmt -s -w ."
            exit 1
          fi

      - name: Install goimports
        run: go install golang.org/x/tools/cmd/goimports@latest

      - name: Verify goimports
        run: |
          set -euo pipefail
          files=$(goimports -l . | grep -Ev '^(vendor/|$)' || true)
          if [[ -n "${files}" ]]; then
            echo "These files need goimports:"
            echo "${files}"
            echo "Run: goimports -w ."
            exit 1
          fi

      - name: go vet
        run: go vet ./...

      - name: Check go.mod is tidy
        run: |
          set -euo pipefail
          cp go.mod go.mod.bak
          cp go.sum go.sum.bak
          go mod tidy
          if ! diff -u go.mod.bak go.mod >/dev/null || ! diff -u go.sum.bak go.sum >/dev/null; then
            echo "go.mod/go.sum changed after 'go mod tidy'. Please run it locally and commit."
            git --no-pager diff -- go.mod go.sum
            exit 1
          fi

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          args: --timeout=5m --output.text.colors=true --output.text.print-linter-name=true

  test:
    name: Test (Ginkgo) + coverage
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true

      - name: Download modules
        run: go mod download

      - name: Run unit tests with CI build flags
        run: |
          set -euo pipefail
          # Exclude build_info, mock, and testutil packages from coverage
          go test $(go list ./... | grep -v -E '/(build_info|mock|testutil)$') -race -covermode=atomic -coverprofile=coverage.out -ldflags "-X github.com/louiss0/javascript-package-delegator/build_info.rawCI=true"

      - name: Coverage summary
        run: |
          set -euo pipefail
          total=$(go tool cover -func=coverage.out | awk '/total:/ {print $3}')
          echo "### Test Coverage" >> $GITHUB_STEP_SUMMARY
          echo "Total: ${total}" >> $GITHUB_STEP_SUMMARY

      - name: Coverage threshold check
        run: |
          set -euo pipefail
          coverage_percent=$(go tool cover -func=coverage.out | awk '/^total:/ { if ($3+0 < 80) exit 1 }')
          if ! go tool cover -func=coverage.out | awk '/^total:/ { if ($3+0 < 80) exit 1 }'; then
            echo "❌ Coverage is below 80% threshold"
            go tool cover -func=coverage.out | tail -n 1
            exit 1
          fi
          echo "✅ Coverage meets 80% threshold"

      - name: Generate HTML coverage report
        run: go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: |
            coverage.out
            coverage.html

  build:
    name: Cross-compile smoke builds
    runs-on: ubuntu-latest
    needs: [test]
    strategy:
      fail-fast: true
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true

      - name: Build ${{ matrix.goos }}-${{ matrix.goarch }}
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          set -euo pipefail
          DATE_RFC3339=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          LDFLAGS="-X github.com/louiss0/javascript-package-delegator/build_info.rawCLI_VERSION=dev -X github.com/louiss0/javascript-package-delegator/build_info.rawGO_MODE=development -X github.com/louiss0/javascript-package-delegator/build_info.rawBUILD_DATE=${DATE_RFC3339} -X github.com/louiss0/javascript-package-delegator/build_info.rawCI=true -s -w"
          mkdir -p dist
          out="dist/jpd-${GOOS}-${GOARCH}"
          if [[ "${GOOS}" == "windows" ]]; then out="${out}.exe"; fi
          go build -trimpath -ldflags "${LDFLAGS}" -o "${out}" ./main.go

      - name: Upload binaries (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: jpd-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/
