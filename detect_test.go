package main_test

import (
	"os"
	"runtime"

	"github.com/louiss0/javascript-package-delegator/detect"
	. "github.com/onsi/ginkgo/v2"

	"github.com/stretchr/testify/assert"
)

var _ = Describe("Detect", func() {

	assert := assert.New(GinkgoT())

	Describe("Package Manager", func() {
		var tempDir string
		var originalDir string

		BeforeEach(func() {
			originalDir, _ = os.Getwd()
			tempDir, _ = os.MkdirTemp("", "jpd-test-*")
			os.Chdir(tempDir)
		})

		AfterEach(func() {
			os.Chdir(originalDir)
			os.RemoveAll(tempDir)
		})

		It("should detect deno from deno.lock", func() {

			os.WriteFile("deno.lock", []byte(`{}`), 0644)
			pkg, error := detect.JSPackageManager()

			assert.NoError(error)

			assert.Equal(pkg, "deno")
			assert.True(true) // Placeholder
		})

		It("should detect deno from deno.json", func() {
			os.WriteFile("deno.json", []byte(`{}`), 0644)
			pkg, error := detect.JSPackageManager()

			assert.NoError(error)

			assert.Equal(pkg, "deno")
		})

		It("should detect deno from deno.jsonc", func() {
			os.WriteFile("deno.jsonc", []byte(`{}`), 0644)
			pkg, error := detect.JSPackageManager()

			assert.NoError(error)

			assert.Equal(pkg, "deno") // Would test actual detection here
		})

		It("should detect bun from bun.lockb", func() {
			os.WriteFile("bun.lockb", []byte(``), 0644)
			pkg, error := detect.JSPackageManager()

			assert.NoError(error)

			assert.Equal(pkg, "bun")
		})

		It("should detect pnpm from pnpm-lock.yaml", func() {
			os.WriteFile("pnpm-lock.yaml", []byte(`lockfileVersion: 5.4`), 0644)
			pkg, error := detect.JSPackageManager()

			assert.NoError(error)

			assert.Equal(pkg, "pnpm")
		})

		It("should detect yarn from yarn.lock", func() {
			os.WriteFile("yarn.lock", []byte(`# THIS IS AN AUTOGENERATED FILE`), 0644)
			pkg, error := detect.JSPackageManager()

			assert.NoError(error)

			assert.Equal(pkg, "yarn")
		})

		It("should detect npm from package-lock.json", func() {
			pkg, error := detect.JSPackageManager()

			assert.NoError(error)

			assert.Equal(pkg, "npm")
		})

		It("should default to npm when no lock files found", func() {
			pkg, error := detect.JSPackageManager()

			assert.NoError(error)

			assert.Equal(pkg, "npm")
		})

		It("should prioritize deno over other package managers", func() {
			// Create multiple lock files
			os.WriteFile("deno.json", []byte(`{}`), 0644)
			os.WriteFile("package-lock.json", []byte(`{}`), 0644)
			os.WriteFile("yarn.lock", []byte(``), 0644)
			pkg, error := detect.JSPackageManager()

			assert.NoError(error)

			assert.Equal("deno", pkg)
		})
	})

	Describe("SupportedOSPackageManager", func() {

		// I'm using Linux with my own package manager nix!
		// I decided to write a test for that on Linux a package manager
		// is supposed to be choosen based on OS
		It("detect's nix", func() {

			if runtime.GOOS != "linux" {
				Skip("This is linux nix is a linux only")
			}

			supported_package, error := detect.SupportedOperatingSystemPackageManager()

			assert.NoError(error)

			assert.NotEmpty(supported_package)

			assert.Equal("nix", supported_package)

		})

		// This test will check for brew since it's generally installed on Mack!
		It("detect's brew", func() {

			if runtime.GOOS != "mac" {
				Skip("This is linux brew is a linux only")
			}

			supported_package, error := detect.SupportedOperatingSystemPackageManager()

			assert.NoError(error)

			assert.NotEmpty(supported_package)

			assert.Equal("brew", supported_package)

		})

		// This test will check for winget since it's generally installed on Windows now!
		It("detect's winget", func() {

			if runtime.GOOS != "windows" {
				Skip("This is linux winget is a linux only")
			}

			supported_package, error := detect.SupportedOperatingSystemPackageManager()

			assert.NoError(error)

			assert.NotEmpty(supported_package)

			assert.Equal("winget", supported_package)

		})

	})

})
