# yaml-language-server: $schema=https://goreleaser.com/static/schema.json

version: 2
project_name: javascript-package-delegator

builds:
  - main: ./main.go
    id: jpd
    binary: jpd
    goos:
      - linux
      - darwin
      - windows
    goarch:
      - amd64
      - arm64
    ldflags:
      - -s -w # Common flags to strip debug information for smaller binaries

      # Inject CLI_VERSION using the Git tag
      # Target: github.com/louiss0/javascript-package-delegator/build_info.rawCLI_VERSION
      - -X {{ .ModulePath }}/build_info.rawCLI_VERSION={{ .Version }}

      # Inject GO_MODE, forcing it to "production" for release builds
      # Target: github.com/louiss0/javascript-package-delegator/build_info.rawGO_MODE
      - -X {{ .ModulePath }}/build_info.rawGO_MODE=production

      # Inject BUILD_DATE using the release date (RFC3339 format)
      # Target: github.com/louiss0/javascript-package-delegator/build_info.rawBUILD_DATE
      - -X {{ .ModulePath }}/build_info.rawBUILD_DATE={{ .Date }}

archives:
  - formats: [tar.gz]
    name_template: "{{ .ProjectName }}_{{ .Version }}_{{ .Os }}_{{ .Arch }}"
    format_overrides:
      - goos: windows
        formats: [zip]

checksum:
  name_template: "checksums.txt"
  algorithm: sha256

changelog:
  # Filter out commits that match these patterns from the release changelog
  filters:
    exclude:
      # Exclude maintenance and documentation commits
      - '^docs(\(.*\))?:'
      - '^chore(\(.*\))?:'
      - '^style(\(.*\))?:'
      - '^refactor(\(.*\))?:'
      # Also exclude merge commits and dependency updates
      - "^Merge"
      - '^(build|ci)\(deps'
      - '^(build|ci)\(.*\): bump'
  # Group commits by type in the release notes
  groups:
    - title: "Features"
      regexp: '^feat(\(.*\))?:'
      order: 0
    - title: "Bug Fixes"
      regexp: '^fix(\(.*\))?:'
      order: 1
    - title: "Tests"
      regexp: '^test(\(.*\))?:'
      order: 2
    - title: "Performance"
      regexp: '^perf(\(.*\))?:'
      order: 3
    - title: "CI/Build"
      regexp: '^(build|ci)(\(.*\))?:'
      order: 4
    - title: "Others"
      order: 999
  # Sort commits within groups
  sort: asc

release:
  github:
    owner: louiss0
    name: javascript-package-delegator

winget:
  - name: javascript-package-delegator
    publisher: the-code-fixer-23
    short_description: "A CLI for executing JavaScript package manager commands based on lock files. Supports npm, yarn, pnpm, bun, and deno."

    homepage: "https://github.com/louiss0/javascript-package-delegator"
    path: "manifests/t/the-code-fixer-23/javascript-package-delegator/{{ .Version }}"
    license: MIT
    publisher_url: https://github.com/louiss0
    publisher_support_url: "https://github.com/louiss0/javascript-package-delegator/issues/new"
    package_identifier: the-code-fixer-23.javascript-package-delegator

    # Product code to be used.
    #
    # Usually needed when `use: msi`.
    #

    # Git author used to commit to the repository.
    # Templates: allowed.
    commit_author:
      name: louis0
      email: louishelton0@gmail.com

    # The project name and current git tag are used in the format string.
    #
    # Templates: allowed.
    commit_msg_template: "{{ .PackageIdentifier }}: {{ .Tag }}"

    # Setting this will prevent goreleaser to actually try to commit the updated
    # package - instead, it will be stored on the dist directory only,
    # leaving the responsibility of publishing it to the user.
    #
    # If set to auto, the release will not be uploaded to the repository
    # in case there is an indicator for prerelease in the tag e.g. v1.0.0-rc1
    #
    # Templates: allowed.
    # skip_upload: true

    # Release notes.
    #
    # If you want to use the release notes generated by GoReleaser, use
    # `{{.Changelog}}` as the value.
    #
    # Templates: allowed.
    release_notes: "{{.Changelog}}"

    # Tags.
    #
    # GoReleaser converts all tags to lowercase and replace
    # spaces with hyphens (-) as per winget's best practices.
    tags:
      - pnpm
      - package-manager
      - yarn
      - npm
      - deno
      - bun

    # Repository to push the generated files to.
    repository:
      # Repository owner.
      #
      # Templates: allowed.
      owner: louiss0

      # Repository name.
      #
      # Templates: allowed.
      name: winget-pkgs
    
      # For uploading to git!
      git:
        url: git@github.com:louiss0/winget-pkgs.git
        private_key: "{{ .Env.GORELEASER_DEPLOY_KEY }}"

homebrew_casks:
  - name: javascript-package-delegator
    binary: jpd

    # Completions for different shells
    #
    # Templates: allowed.
    # TODO: Figure out how to use these options
    # completions:
    #   bash: completions/myapp.bash
    #   zsh: completions/myapp.zsh
    #   fish: completions/myapp.fish

    # Git author used to commit to the repository.
    # Templates: allowed.
    commit_author:
      name: louiss0
      email: louishelton0@gmail.com
    # The project name and current git tag are used in the format string.
    #
    # Templates: allowed.
    commit_msg_template: "Brew cask update for {{ .ProjectName }} version {{ .Tag }}"

    # Setting this will prevent goreleaser to actually try to commit the updated
    # cask - instead, the cask file will be stored on the dist directory
    # only, leaving the responsibility of publishing it to the user.
    # If set to auto, the release will not be uploaded to the homebrew tap
    # in case there is an indicator for prerelease in the tag e.g. v1.0.0-rc1
    #
    # Templates: allowed.
    # skip_upload: true

    homepage: "https://github.com/louiss0/javascript-package-delegator"

    description: "A CLI for executing JavaScript package manager commands based on lock files. Supports npm, yarn, pnpm, bun, and deno."
    # Repository to push the generated files to.
    repository:
      # Repository owner.
      owner: louiss0

      # Repository name.
      #
      # Templates: allowed.
      name: homebrew-the-code-fixer-23

      # Clone, create the file, commit and push, to a regular Git repository.
      #
      # Notice that this will only have any effect if the given URL is not
      # empty.
      # For uploading to git!
      git:
        url: git@github.com:louiss0/homebrew-the-code-fixer-23.git
        private_key: "{{ .Env.GORELEASER_DEPLOY_KEY }}"

scoops:
  - name: javascript-package-delegator

    commit_author:
      name: louiss0
      email: louishelton0@gmail.com

    # shortcuts: [[javascript-package-delegator.exe, jpd]]  # Not needed for CLI tools

    # The project name and current git tag are used in the format string.
    #
    # Templates: allowed.
    commit_msg_template: "Scoop update for {{ .ProjectName }} version {{ .Tag }}"

    goamd64: v3

    # Setting this will prevent goreleaser to actually try to commit the updated
    # cask - instead, the cask file will be stored on the dist directory
    # only, leaving the responsibility of publishing it to the user.
    #
    # If set to auto, the release will not be uploaded to the repository
    # in case there is an indicator for prerelease in the tag e.g. v1.0.0-rc1
    #
    # Templates: allowed.
    # skip_upload: true

    homepage: "https://github.com/louiss0/javascript-package-delegator"

    directory: bucket

    license: MIT

    description: "A CLI for executing JavaScript package manager commands based on lock files. Supports npm, yarn, pnpm, bun, and deno."

    # Repository to push the generated files to.
    repository:
      # Repository owner.
      owner: louiss0

      # Repository name.
      #
      # Templates: allowed.
      name: the-code-fixer-23-buckets

      # Optionally a branch can be provided.
      #
      # Default: default repository branch.
      # Templates: allowed.
      branch: main

      # For uploading to git!
      git:
        url: git@github.com:louiss0/the-code-fixer-23-buckets.git
        private_key: "{{ .Env.GORELEASER_DEPLOY_KEY }}"

nix:
  - name: javascript-package-delegator

    # GOAMD64 to specify which amd64 version to use if there are multiple
    # versions from the build section.
    #
    # Default: v1.
    goamd64: v1

    # Git author used to commit to the repository.
    # Templates: allowed.
    commit_author:
      name: louiss0
      email: louishelton0@gmail.com

    # The project name and current git tag are used in the format string.
    #
    # Templates: allowed.
    commit_msg_template: "{{ .ProjectName }}: {{ .Tag }}"

    # Path for the file inside the repository.
    #
    # Default: pkgs/<name>/default.nix.
    # Templates: allowed.
    path: "pkgs/{{ .ProjectName }}/default.nix"

    # Your app's homepage.
    #
    # Templates: allowed.
    # Default: inferred from global metadata.
    homepage: "https://github.com/louiss0/javascript-package-delegator"

    description: "A CLI for executing JavaScript package manager commands based on lock files. Supports npm, yarn, pnpm, bun, and deno."

    # License name.
    #
    # Default: inferred from global metadata.
    license: "mit"

    # Setting this will prevent goreleaser to actually try to commit the updated
    # package - instead, it will be stored on the dist directory only,
    # leaving the responsibility of publishing it to the user.
    #
    # If set to auto, the release will not be uploaded to the repository
    # in case there is an indicator for prerelease in the tag e.g. v1.0.0-rc1
    #
    # Templates: allowed.
    # skip_upload: true

    # Repository to push the generated files to.
    repository:
      # Repository owner.
      #
      # Templates: allowed.
      owner: louiss0
      # Repository name.
      #
      # Templates: allowed.
      name: the-code-fixer-23-nur

      # Optionally a branch can be provided.
      #
      # Default: default repository  branch.
      # Templates: allowed.
      branch: main

      # For uploading to git!
      git:
        # The Git URL to push.
        #
        # Templates: allowed.
        url: "git@github.com:louiss0/the-code-fixer-23-nur.git"
        private_key: "{{ .Env.GORELEASER_DEPLOY_KEY }}"
